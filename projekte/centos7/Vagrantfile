# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos7"
  config.disksize.size = '100GB'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 8010, host: 8010

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network", ip: "192.168.33.10"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
	vb.name = "Jenkins"
    vb.memory = "8192"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    # yum update -y
    yum install -y yum-utils device-mapper-persistent-data lvm2
    yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    yum install -y docker-ce docker-ce-cli containerd.io
    systemctl start docker
	systemctl enable docker
	usermod -aG docker vagrant
	yum install -y curl
	yum install -y dos2unix
	curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	chmod +x /usr/local/bin/docker-compose
	mkdir /home/vagrant/jenkins_data
	chown vagrant:vagrant /home/vagrant/jenkins_data
	
	mkdir /home/vagrant/jenkins_data/jenkins_home
	chown 1000:1000 /home/vagrant/jenkins_data/jenkins_home -R
	cp /vagrant/script.sh /home/vagrant/jenkins_data/script.sh
	chmod +x /home/vagrant/jenkins_data/script.sh
	dos2unix /home/vagrant/jenkins_data/script.sh
	docker cp /home/vagrant/jenkins_data/script.sh jenkins:/tmp/script.sh
	
	# Creating a remote host
	mkdir /home/vagrant/jenkins_data/remote-data
	chown vagrant:vagrant /home/vagrant/jenkins_data/remote-data
	cp /vagrant/remote-data/dockerfile /home/vagrant/jenkins_data/remote-data/dockerfile
	chown vagrant:vagrant /home/vagrant/jenkins_data/remote-data/dockerfile
	cp /vagrant/remote-data/remote-key /home/vagrant/jenkins_data/remote-data/remote-key
	chown vagrant:vagrant /home/vagrant/jenkins_data/remote-data/remote-key
	cp /vagrant/remote-data/remote-key.pub /home/vagrant/jenkins_data/remote-data/remote-key.pub
	chown vagrant:vagrant /home/vagrant/jenkins_data/remote-data/remote-key.pub
	chmod 600 /home/vagrant/jenkins_data/remote-data/remote-key
	docker cp /home/vagrant/jenkins_data/remote-data/remote-key jenkins:/tmp/remote-key
	cp /vagrant/remote-data/script.sh /home/vagrant/jenkins_data/remote-data/script.sh
	chown vagrant:vagrant /home/vagrant/jenkins_data/remote-data/script.sh
	chmod 711 /home/vagrant/jenkins_data/remote-data/script.sh
	dos2unix /home/vagrant/jenkins_data/remote-data/script.sh
	docker cp /home/vagrant/jenkins_data/remote-data/script.sh remote_host:/tmp/script.sh
	
	# Creating ansible host
	mkdir /home/vagrant/jenkins_data/jenkins-ansible
	cp /vagrant/jenkins-ansible/dockerfile /home/vagrant/jenkins_data/jenkins-ansible/dockerfile
	chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible
	chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible/dockerfile
	# mkdir /home/vagrant/jenkins_data/db_data
	# chown vagrant:vagrant /home/vagrant/jenkins_data/db_data
	# 
	# mkdir /home/vagrant/jenkins_data/jenkins-ansible
	# chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible
	# mkdir /home/vagrant/jenkins_data/jenkins-ansible/web
	# chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible/web
	# cp /vagrant/web_dockerfile /home/vagrant/jenkins_data/jenkins-ansible/web/dockerfile
	# chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible/web/dockerfile
	# cp /vagrant/ansible-dockerfile /home/vagrant/jenkins_data/jenkins-ansible/dockerfile
	# chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible/dockerfile
	# cp /vagrant/remote-key /home/vagrant/jenkins_data/jenkins-ansible/remote-key
	# chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible/remote-key
	# cp /vagrant/hosts /home/vagrant/jenkins_data/jenkins-ansible/hosts
	# chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible/hosts
	# cp /vagrant/play.yml /home/vagrant/jenkins_data/jenkins-ansible/play.yml
	# chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible/play.yml
	# cp /vagrant/play2.yml /home/vagrant/jenkins_data/jenkins-ansible/play2.yml
	# chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible/play2.yml
	# mkdir /home/vagrant/jenkins_data/jenkins-ansible/web/conf
	# chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible/web/conf
	# cp /vagrant/nginx.conf /home/vagrant/jenkins_data/jenkins-ansible/web/conf/nginx.conf
	# chown vagrant:vagrant /home/vagrant/jenkins_data/jenkins-ansible/web/conf/nginx.conf
	
	# mkdir /home/vagrant/jenkins_data/remote-data
	# chown vagrant:vagrant /home/vagrant/jenkins_data/remote-data
	# cp /vagrant/remote-dockerfile /home/vagrant/jenkins_data/remote-data/dockerfile
	# chown vagrant:vagrant /home/vagrant/jenkins_data/remote-data/dockerfile
	# cp /vagrant/remote-key /home/vagrant/jenkins_data/remote-data/remote-key
	# chown vagrant:vagrant /home/vagrant/jenkins_data/remote-data/remote-key
	# cp /vagrant/remote-key.pub /home/vagrant/jenkins_data/remote-data/remote-key.pub
	# chown vagrant:vagrant /home/vagrant/jenkins_data/remote-data/remote-key.pub
	
	cp /vagrant/docker-compose.yml /home/vagrant/jenkins_data/
	chown vagrant:vagrant /home/vagrant/jenkins_data/docker-compose.yml
	cd /home/vagrant/jenkins_data
	docker pull jenkins/jenkins

  SHELL
  
  # config.vm.provision :docker
  # config.vm.provision :docker_compose, yml: "/home/vagrant/jenkins_data/docker-compose.yml", rebuild: true, command_options:{up: "-d"}, run: "always"
end
